---
import { getSession } from "auth-astro/server";
const session = await getSession(Astro.request);

const userEmail = session?.user?.email ?? "";
---

<div class="search-container relative">
  <input
    type="text"
    id="movie-search"
    autocomplete="off"
    placeholder="Busca una pelicula para añadirla a ver mas tarde..."
  />
  <ul id="suggestions" class="suggestions"></ul>
  <div
    id="suggestion-empty"
    style="display: none"
    class="absolute top-14 bg-[#2c2c2c] border border-[#4a4a4a] z-20 rounded-md py-12 left-0 w-full text-center text-gray-400 text-sm"
  >
    No se encontraron peliculas con tu búsqueda
  </div>
</div>

<style is:global>
  .search-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 2rem;
    position: relative;
    width: 100%;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }
  #movie-search {
    width: 100%;
    padding: 0.5rem 1rem;
    font-size: 1.2rem;
    border: 2px solid #4a4a4a;
    border-radius: 25px;
    background-color: #2c2c2c;
    color: white;
  }
  #movie-search:focus {
    outline: none;
    border-color: rgb(var(--accent-light));
  }
  .suggestions {
    position: absolute;
    top: calc(100% + 10px);
    left: 0;
    right: 0;
    z-index: 10;
    background-color: #2c2c2c;
    border: 1px solid #4a4a4a;
    border-radius: 5px;
    list-style-type: none;
    margin: 0;
    padding: 0;
    max-height: 300px;
    overflow-y: auto;
    display: none;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .suggestions > li {
    padding: 0.5rem;
    cursor: pointer;
    display: flex;
    max-height: 75px;
    align-items: center;
  }

  .suggestions > li:hover {
    background-color: #3a3a3a;
  }

  li > .suggestion-image {
    width: 60px;
    object-fit: cover;
    aspect-ratio: calc(1 / 1);
    margin-right: 10px;
    border-radius: 3px;
  }

  li > .suggestion-title {
    flex-grow: 1;
  }
</style>

<script>
  import { $ } from "@lib/dom";
  import { debounce } from "@utils/debounce";
  import { addNewMovieToList, reloadFilteredMovies } from "@utils/reload";
  import { searchMovies, SaveMovieToDB } from "@services/movies";
  import type { Movie } from "../types/movies";

  const searchInput = $<HTMLInputElement>("#movie-search");
  const suggestionsList = $<HTMLUListElement>("#suggestions");
  const emptySuggestions = $<HTMLDivElement>("#suggestion-empty");

  searchInput?.addEventListener("input", debounce(handleSearch, 500));

  async function handleSearch() {
    if (
      searchInput === null ||
      suggestionsList === null ||
      emptySuggestions === null
    )
      return;
    const inputValue = searchInput.value.toLowerCase();

    if (inputValue.length < 3) {
      suggestionsList.style.display = "none";
      emptySuggestions.style.display = "none";
      return;
    }

    const filteredMovies = await searchMovies({ search: inputValue });
    displaySuggestions(filteredMovies);
  }

  function displaySuggestions(filteredMovies: Movie[]) {
    if (
      searchInput === null ||
      suggestionsList === null ||
      emptySuggestions === null
    )
      return;
    suggestionsList.innerHTML = "";

    if (filteredMovies.length === 0) {
      emptySuggestions.style.display = "block";
      return;
    } else {
      emptySuggestions.style.display = "none";
    }

    filteredMovies.forEach((movie) => {
      const li = createSuggestion(movie);
      suggestionsList.appendChild(li);
    });
    suggestionsList.style.display = "block";
  }

  function createSuggestion(movie: Movie) {
    const li = document.createElement("li");
    li.innerHTML = `
          <img src="${movie.poster}" alt="${movie.title}" class="suggestion-image">
          <span class="suggestion-title">${movie.title}</span>
        `;
    li.addEventListener("click", () => {
      handleListItemClick(movie);
    });
    return li;
  }

  async function handleListItemClick(movie: Movie) {
    const $userEmail = $("#user-email");

    const userEmail = $userEmail?.dataset.email ?? "";
    const result = await SaveMovieToDB({ movie, userEmail });
    if (result.success) {
      addNewMovieToList(movie);
      searchInput!.value = "";
      suggestionsList!.style.display = "none";
    }
  }

  // Hide suggestions when clicking outside
  document.addEventListener("click", (event) => {
    // @ts-expect-error
    if (!event.target.closest(".search-container") && suggestionsList) {
      suggestionsList.style.display = "none";
    }
  });
</script>
